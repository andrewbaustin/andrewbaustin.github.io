a[2:3]
a[2:3,4:5]
a[2:3,1:2]
a[[2]]
a[2]
a[2][3:4]
a[3:4,2]
a[[2]][3:4]
a
colsums(a)
colSums(a)
colSums(a[2:3])
colMeans(a[2:3])
colMeans(a[-1])
an_environment <- new.env()
an_environment[["pythag"]] <- c(12, 15, 20, 21)
pythag
an_environment
polyroot(c(6, -5, 1))
an_environment[[pythag]]
an_environment$pythag
pythag
is.recursive(an_environment)
exists("pythag", an_environment, inherits = FALSE)
exists("a", an_environment, inherits = FALSE)
exists("a", an_environment, inherits = TRUE)
c
runif
sd
ls
ls()
ls(an_environment)
ls.str()
?replicate
replicate(10,sum(runif))
runif(100)
sum(runif(100)>0.5
)
sum(runif(100)>0.5)
sum(runif(100)>0.5)
sum(runif(100)>0.5)
replicate(10,sum(runif(100)>0.5))
print
paste
x <- c(
"I", "saw", "a", "saw", "that", "could", "out",
"saw", "any", "other", "saw", "I", "ever", "saw"
)
x
noquote(x)
exp(1:3)
?exp
formatC(exp(1:3))
n <- formatC(exp(1:3))
n
class(n)
?sprintf
"foor\tsjs"
print("foor\tsjs")
cat("foor\tsjs")
cat("foor\nsjs")
cat("foor\sjs")
cat("foor\\sjs")
alarm()
alarm()
?substring
g <- "drewaustin"
g
substring(g,2:4)
substring(g,2:4,3)
substring(g,2:4,5)
getwd()
R.home()
path.expand("~")
path.expand(".")
path.expand("..")
.
gender_char <- c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
(gender_fac <- factor(gender_char))
gender_char
gender_fac
length(gender_fac)
gender_fac[1]
gender_fac[10]
gender_fac[5]
gender_fac[3]
gender_fac[2]
gender_fac[1:5]
relevel(gender_fac, "male")
gender_fac[1:5]
f <- c("x","y","x","z","y","y","z","x","z")
ff <- factor(f)
ff
relevel(ff,"z")
seq.int(16, 66, 10)
ff
levels(ff)
as.integer(ff)
levels(ff)[as.integer(ff)]
class(ff)
levels(ff)[2
]
levels(ff)[2,3,1]
levels(ff)[c(2,3,1)]
levels(ff)
class(levels(ff))
c("x","y","z")[]
treatment <- gl(3, 2, labels = c("placebo", "drug A", "drug B"))
gender <- gl(2, 1, 6, labels = c("female", "male"))
treatment
gender
interaction(treatment, gender)
?interaction
if(TRUE) print(ff)
rbinom(10, 1, 0.5)
rbinom(10, 1, 0.5)
rbinom(10, 1, 0.5)
(greek <- switch(
"gamma",
alpha = 1,
beta  = sqrt(4),
gamma =
{
a <- sin(pi / 3)
4*a^2 }
))
?greek
greek
greek(alpha)
greek("alpha")
?switch
(greek <- switch(
x,
alpha = 1,
beta  = sqrt(4),
gamma =
{
a <- sin(pi / 3)
4*a^2 }
))
repeat
{
message("Happy Groundhog Day!")
}
action <- sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
action
action
action
action
action
action
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
sample(
c(
"Learn French",
"Make an ice statue",
"Rob a bank",
"Win heart of Andie McDowell"
),
1
)
?sample
i
?vapply
(frogger_scores <- data.frame(
player = rep(c("Tom", "Dick", "Harry"), times = c(2, 5, 3)),
score  = round(rlnorm(10, 8), -1)
))
frogger_scores
?with
split(frogger_scores$score)
split(frogger_scores$score,frogger_scores$player)
?split
class(split(frogger_scores$score,frogger_scores$player))
rep(mean(4,8),6)
mean(4,8)
mean(c(4,8),7)
rep(mean(c(4,8),7))
rep(mean(c(4,8)),7)
search()
install.packages("devtools")
Sys.time()
class(Sys.time())
unclass(Sys.time())
unclass(Sys.time())
unclass(Sys.time())
?floor
floor(5.7)
ceiling(6.3)
data()
?system.file
library(learningr)
?str
k <- c(5,2,36,6,7)
k
rev(k)
install.packages("twitteR")
library(twitteR)
?twitteR
??twitteR
getTrends()
?system.file
?download.file
?cat
k
which(k)
?which
l <- c(1,0,1,1,1,0,0)
l
which(l)
l <- c(TRUE,FALSE,TRUE,TRUE,FALSE)
which(l)
table(l)
max(table(l))
class(table(l))
names(max(table(l))
)
?table
letters[1:3]
str(table)
j <- table(l)
j
str(j)
j[max(j)]
max(j)
j[3]
j[3,]
j["TRUE"]
j[3]
j
j*2
class(j)
j + 5
find(max(j))
max(j)
j
find(j,3)
?find
find(3)
find(j)
j[find(3)]
j[find("3")]
j[1]
find(j[1])
tabulate(j)
which.max(j)
j
unique(which.max(j))
names(j)
names(which.max(j))
ovm
colors()
orchid3
colors$orchid3
colors[4]
colors
?colors
sample(colors())
sample(colors(),6)
RNGkind()
RNGkind(runif)
RNGkind("runif")
?RNGkind
set.seed(15)
runif(3)
set.seed(15)
runif(3)
dnorm()
dnorm(k)
?dnorm
?pnorm
?nobs
?fitted
?influence.measures
influence.measures()
?kmeans
kmeans()
f <- function(x) {
message("'x' contains ", toString(x))
x
}
f(6)
f(letters[1:5])
?any
any(FALSE,TRUE)
any(FALSE,TRUE,TRUE,FALSE)
any(FALSE,FALSE)
last.warning
last.warning()
warning("ogsdoa")
last.warning()
last.warning
sapply(letters[1:5], charToRaw)
charToRaw()
?charToRaw
class(sapply(letters[1:5], charToRaw))
?inherits
inherits(c(5,6,2),numeric)
inherits(c(5,6,2),"numeric")
inherits(c("tutle"),"numeric")
inner_fn <- function(x) exp(x)
inner_fn(5)
error(ls)
debug(f)
debug(inner_fn)
debug(ls)
hypotenuse <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
undebug
undebug(ls)
hypotenuse <- function(x, y) {
sqrt(x ^ 2 + y ^ 2)
}
hypotenuse(3,4)
library(RUnit)
atan(c(-Inf, -1, 0, 1, Inf))
quote(atan(c(-Inf, -1, 0, 1, Inf))))
quote(atan(c(-Inf, -1, 0, 1, Inf)))
assign(x,77)
assign("p",77)
p
get(p)
get("ls")
get(p)
get("p")
parsed_r_code <- parse(text = "atan(c(-Inf, -1, 0, 1, Inf))")
parsed_r_code
eval(parsed_r_code)
substitute(x)
class(substitute(x))
install.packages("XML")
system.file("blogmigration")
?system.file
?xml2
xml_file <- "blogcontent.xml"
install.packages("XML")
install.packages("tm")
library(XML)
setwd("~/Desktop/blogmigration")
xmlparsefile <- xmlInternalTreeParse("blogcontent.xml")
# src_channel <- xpathSApply(xmlparsefile, "//channel")
posts <- xpathSApply(xmlparsefile, "//item")
postextract <- function(x){
t <- xmlChildren(x)
iso <- function(item){return(xmlValue(t[names(t)==item][[1]][[1]]))}
title <- iso("title")
link <- iso("link")
pubdate <- iso("post_date") # post_date, post_date_gmt, pubDate
content <- iso("encoded") # there are 2 of these
id <- iso("post_id")
posttype <- iso("post_type")
status <- iso("status")
ispost <- posttype == "post" & status == "publish"
s <- list(title,link,pubdate,content,id,posttype,status,ispost)
names(s) <- c("title","link","pubdate","content","id","posttype","status","is_post")
return(s)
}
ep <- lapply(posts,postextract)
ip <- function(x){return(x[[8]])}
ap <- vapply(ep,ip,logical(1))
actualposts <- ep[ap]
rm(posts,ep,ap)
site <- "~/repos/andrewbaustin.github.io"
setwd(site)
# frontmatter
layout <- "post"
separator <- "<!--more-->"
footer <- "Additional information?"
buildcontent <- function(post){
yr <- strsplit(post[[2]],"/")[[1]][4]
mt <- strsplit(post[[2]],"/")[[1]][5]
dy <- strsplit(post[[2]],"/")[[1]][6]
ti <- strsplit(post[[2]],"/")[[1]][7]
dir.create(yr)
dir.create(paste0(yr,"/",mt))
dir.create(paste0(yr,"/",mt,"/",dy))
dir.create(paste0(yr,"/",mt,"/",dy,"/",ti))
cat("---\nlayout: ",
layout,
"\ntitle: ",
post[[1]],
"\ndate: ",
paste0(yr,"-",mt,"-",dy),
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = paste0(yr,"/",mt,"/",dy,"/",ti,"/index.md"))
}
lapply(actualposts,buildcontent)
