p <- c("---\nlayout: post\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "")
p
p <- cat("---\nlayout: post\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "")
p <- paste(cat("---\nlayout: post\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = ""))
p
?cat
p <- c("---\nlayout: post\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "")
p
?strwrap
?writelines
?writeLines
?cat
post <- actualposts[[92]]
post
p <- cat("---\nlayout: post\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "")
p <- c(cat("---\nlayout: post\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = ""))
p
p <- cat("---\nlayout: post\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = "index.md")
p <- cat("---\nlayout: oldpost\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = "index.md")
return(p)
p <- cat("---\nlayout: oldpost\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = "index.md")
setwd("~/repos/andrewbaustin.github.io")
library(XML)
setwd("~/Desktop/blogmigration")
xmlparsefile <- xmlInternalTreeParse("blogcontent.xml")
# src_channel <- xpathSApply(xmlparsefile, "//channel")
posts <- xpathSApply(xmlparsefile, "//item")
postextract <- function(x){
t <- xmlChildren(x)
iso <- function(item){return(xmlValue(t[names(t)==item][[1]][[1]]))}
title <- iso("title")
link <- iso("link")
pubdate <- iso("post_date") # post_date, post_date_gmt, pubDate
content <- iso("encoded") # there are 2 of these
id <- iso("post_id")
posttype <- iso("post_type")
status <- iso("status")
ispost <- posttype == "post" & status == "publish"
s <- list(title,link,pubdate,content,id,posttype,status,ispost)
names(s) <- c("title","link","pubdate","content","id","posttype","status","is_post")
return(s)
}
ep <- lapply(posts,postextract)
ip <- function(x){return(x[[8]])}
ap <- vapply(ep,ip,logical(1))
actualposts <- ep[ap]
actualposts[[5]]
library(XML)
setwd("~/Desktop/blogmigration")
xmlparsefile <- xmlInternalTreeParse("blogcontent.xml")
# src_channel <- xpathSApply(xmlparsefile, "//channel")
posts <- xpathSApply(xmlparsefile, "//item")
postextract <- function(x){
t <- xmlChildren(x)
iso <- function(item){return(xmlValue(t[names(t)==item][[1]][[1]]))}
title <- iso("title")
link <- iso("link")
pubdate <- iso("post_date") # post_date, post_date_gmt, pubDate
content <- iso("encoded") # there are 2 of these
id <- iso("post_id")
posttype <- iso("post_type")
status <- iso("status")
ispost <- posttype == "post" & status == "publish"
s <- list(title,link,pubdate,content,id,posttype,status,ispost)
names(s) <- c("title","link","pubdate","content","id","posttype","status","is_post")
return(s)
}
ep <- lapply(posts,postextract)
ip <- function(x){return(x[[8]])}
ap <- vapply(ep,ip,logical(1))
actualposts <- ep[ap]
rm(posts,ep,ap)
actualposts[[6]]
j <- strsplit(actualposts[[18]][[2]],"/")
j
actualposts[[18]][[1]]
x <- actualposts[[18]]
x
e <- strsplit(x[[2]],"/")
e
class(e)
e[4]
e[{4]}
e[[4]]
e[[1]][4]
linkfolder <- function(x){
e <- strsplit(x[[2]],"/")
print(e[[1]][4])
}
lapply(actualposts,linkfolder)
linkfolder <- function(x){
e <- strsplit(x[[2]],"/")
print(e[[1]])
}
lapply(actualposts,linkfolder)
linkfolder <- function(x){
e <- strsplit(x[[2]],"/")
print(e[[1]][4])
}
linkfolder <- function(x){
e <- strsplit(x[[2]],"/")
return(e[[1]][4])
}
lapply(actualposts,linkfolder)
yrs <- lapply(actualposts,linkfolder)
linkfolder <- function(x){
return(strsplit(x[[2]],"/")[[1]][4])
}
yrs <- lapply(actualposts,linkfolder)
yrs
setwd("~/repos/andrewbaustin.github.io")
dir.create("2016")
setwd("~/repos/andrewbaustin.github.io/2016")
separator <- "<!--more-->"
footer <- "Additional information?"
buildcontent <- function(post){
cat("---\nlayout: oldpost\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = "index.md")
}
x
post <- x
buildcontent <- function(post){
cat("---\nlayout: oldpost\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = "index.md")
}
buildcontent(x)
buildcontent <- function(post){
cat("---\nlayout: ",
layout,
"\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = "index.md")
}
buildcontent(x)
layout <- "oldpost"
buildcontent(x)
post
yr <- strsplit(post[[2]],"/")[[1]][4]
yr
dir.create(yr)
setwd("~/repos/andrewbaustin.github.io")
dir.create(yr)
yr <- '2013'
dir.create(yr)
sitedir <- "~/repos/andrewbaustin.github.io"
setwd(sitedir)
site <- "~/repos/andrewbaustin.github.io"
setwd(site)
yr
paste(site,"/",yr)
paste0(site,"/",yr)
strsplit(post[[2]],"/")[[1]][4]
strsplit(post[[2]],"/")[[1]][5]
strsplit(post[[2]],"/")[[1]][6]
linkfolder <- function(x){
return(strsplit(x[[2]],"/")[[1]][5])
}
yrs <- lapply(actualposts,linkfolder)
yrs
linkfolder <- function(x){
return(strsplit(x[[2]],"/")[[1]][6])
}
yrs <- lapply(actualposts,linkfolder)
yrs
linkfolder <- function(x){
return(strsplit(x[[2]],"/")[[1]][7])
}
yrs <- lapply(actualposts,linkfolder)
yrs
library(XML)
setwd("~/Desktop/blogmigration")
xmlparsefile <- xmlInternalTreeParse("blogcontent.xml")
# src_channel <- xpathSApply(xmlparsefile, "//channel")
posts <- xpathSApply(xmlparsefile, "//item")
postextract <- function(x){
t <- xmlChildren(x)
iso <- function(item){return(xmlValue(t[names(t)==item][[1]][[1]]))}
title <- iso("title")
link <- iso("link")
pubdate <- iso("post_date") # post_date, post_date_gmt, pubDate
content <- iso("encoded") # there are 2 of these
id <- iso("post_id")
posttype <- iso("post_type")
status <- iso("status")
ispost <- posttype == "post" & status == "publish"
s <- list(title,link,pubdate,content,id,posttype,status,ispost)
names(s) <- c("title","link","pubdate","content","id","posttype","status","is_post")
return(s)
}
ep <- lapply(posts,postextract)
ip <- function(x){return(x[[8]])}
ap <- vapply(ep,ip,logical(1))
actualposts <- ep[ap]
rm(posts,ep,ap)
site <- "~/repos/andrewbaustin.github.io"
setwd(site)
yr
post
post <- actualposts[[15]]
post
yr <- strsplit(post[[2]],"/")[[1]][4]
mt <- strsplit(post[[2]],"/")[[1]][5]
dy <- strsplit(post[[2]],"/")[[1]][6]
ti <- strsplit(post[[2]],"/")[[1]][7]
yr
mt
dy
ti
yl <- paste0(site,"/",yr)
yl
setwd(yl)
pwd
setwd(site)
dir.create("2015/08/14/title")
dir.create("2015")
dir.create("2015/4")
buildcontent <- function(post){
yr <- strsplit(post[[2]],"/")[[1]][4]
mt <- strsplit(post[[2]],"/")[[1]][5]
dy <- strsplit(post[[2]],"/")[[1]][6]
ti <- strsplit(post[[2]],"/")[[1]][7]
dir.create(yr)
dir.create(paste0(yr,"/",mt))
dir.create(paste0(yr,"/",mt,"/",dy))
dir.create(paste0(yr,"/",mt,"/",dy,"/",ti))
cat("---\nlayout: ",
layout,
"\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = paste0(yr,"/",mt,"/",dy,"/",ti,"/index.md"))
}
library(XML)
setwd("~/Desktop/blogmigration")
xmlparsefile <- xmlInternalTreeParse("blogcontent.xml")
# src_channel <- xpathSApply(xmlparsefile, "//channel")
posts <- xpathSApply(xmlparsefile, "//item")
postextract <- function(x){
t <- xmlChildren(x)
iso <- function(item){return(xmlValue(t[names(t)==item][[1]][[1]]))}
title <- iso("title")
link <- iso("link")
pubdate <- iso("post_date") # post_date, post_date_gmt, pubDate
content <- iso("encoded") # there are 2 of these
id <- iso("post_id")
posttype <- iso("post_type")
status <- iso("status")
ispost <- posttype == "post" & status == "publish"
s <- list(title,link,pubdate,content,id,posttype,status,ispost)
names(s) <- c("title","link","pubdate","content","id","posttype","status","is_post")
return(s)
}
ep <- lapply(posts,postextract)
ip <- function(x){return(x[[8]])}
ap <- vapply(ep,ip,logical(1))
actualposts <- ep[ap]
rm(posts,ep,ap)
site <- "~/repos/andrewbaustin.github.io"
setwd(site)
# frontmatter
layout <- "oldpost"
separator <- "<!--more-->"
footer <- "Additional information?"
x <- actualposts[[27]]
x
buildcontent(x)
buildcontent <- function(post){
yr <- strsplit(post[[2]],"/")[[1]][4]
mt <- strsplit(post[[2]],"/")[[1]][5]
dy <- strsplit(post[[2]],"/")[[1]][6]
ti <- strsplit(post[[2]],"/")[[1]][7]
dir.create(yr)
dir.create(paste0(yr,"/",mt))
dir.create(paste0(yr,"/",mt,"/",dy))
dir.create(paste0(yr,"/",mt,"/",dy,"/",ti))
cat("---\nlayout: ",
layout,
"\ntitle: ",
post[[1]],
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = paste0(yr,"/",mt,"/",dy,"/",ti,"/index.md"))
}
buildcontent(x)
x
y <- actualposts[[43]]
y
g <- buildcontent(y)
g
library(XML)
setwd("~/Desktop/blogmigration")
xmlparsefile <- xmlInternalTreeParse("blogcontent.xml")
# src_channel <- xpathSApply(xmlparsefile, "//channel")
posts <- xpathSApply(xmlparsefile, "//item")
postextract <- function(x){
t <- xmlChildren(x)
iso <- function(item){return(xmlValue(t[names(t)==item][[1]][[1]]))}
title <- iso("title")
link <- iso("link")
pubdate <- iso("post_date") # post_date, post_date_gmt, pubDate
content <- iso("encoded") # there are 2 of these
id <- iso("post_id")
posttype <- iso("post_type")
status <- iso("status")
ispost <- posttype == "post" & status == "publish"
s <- list(title,link,pubdate,content,id,posttype,status,ispost)
names(s) <- c("title","link","pubdate","content","id","posttype","status","is_post")
return(s)
}
ep <- lapply(posts,postextract)
ip <- function(x){return(x[[8]])}
ap <- vapply(ep,ip,logical(1))
actualposts <- ep[ap]
rm(posts,ep,ap)
site <- "~/repos/andrewbaustin.github.io"
setwd(site)
# frontmatter
layout <- "oldpost"
separator <- "<!--more-->"
footer <- "Additional information?"
buildcontent <- function(post){
yr <- strsplit(post[[2]],"/")[[1]][4]
mt <- strsplit(post[[2]],"/")[[1]][5]
dy <- strsplit(post[[2]],"/")[[1]][6]
ti <- strsplit(post[[2]],"/")[[1]][7]
dir.create(yr)
dir.create(paste0(yr,"/",mt))
dir.create(paste0(yr,"/",mt,"/",dy))
dir.create(paste0(yr,"/",mt,"/",dy,"/",ti))
cat("---\nlayout: ",
layout,
"\ntitle: ",
post[[1]],
"\ndate: ",
paste0(yr,"-",mt,"-",dy),
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = paste0(yr,"/",mt,"/",dy,"/",ti,"/index.md"))
}
x <- actualposts[[35]]
x
buildcontent(x)
library(XML)
setwd("~/Desktop/blogmigration")
xmlparsefile <- xmlInternalTreeParse("blogcontent.xml")
# src_channel <- xpathSApply(xmlparsefile, "//channel")
posts <- xpathSApply(xmlparsefile, "//item")
postextract <- function(x){
t <- xmlChildren(x)
iso <- function(item){return(xmlValue(t[names(t)==item][[1]][[1]]))}
title <- iso("title")
link <- iso("link")
pubdate <- iso("post_date") # post_date, post_date_gmt, pubDate
content <- iso("encoded") # there are 2 of these
id <- iso("post_id")
posttype <- iso("post_type")
status <- iso("status")
ispost <- posttype == "post" & status == "publish"
s <- list(title,link,pubdate,content,id,posttype,status,ispost)
names(s) <- c("title","link","pubdate","content","id","posttype","status","is_post")
return(s)
}
ep <- lapply(posts,postextract)
ip <- function(x){return(x[[8]])}
ap <- vapply(ep,ip,logical(1))
actualposts <- ep[ap]
rm(posts,ep,ap)
site <- "~/repos/andrewbaustin.github.io"
setwd(site)
# frontmatter
layout <- "oldpost"
separator <- "<!--more-->"
footer <- "Additional information?"
buildcontent <- function(post){
yr <- strsplit(post[[2]],"/")[[1]][4]
mt <- strsplit(post[[2]],"/")[[1]][5]
dy <- strsplit(post[[2]],"/")[[1]][6]
ti <- strsplit(post[[2]],"/")[[1]][7]
dir.create(yr)
dir.create(paste0(yr,"/",mt))
dir.create(paste0(yr,"/",mt,"/",dy))
dir.create(paste0(yr,"/",mt,"/",dy,"/",ti))
cat("---\nlayout: ",
layout,
"\ntitle: ",
post[[1]],
"\ndate: ",
paste0(yr,"-",mt,"-",dy),
"\nexcerpt_separator: ",
separator,
"\npostFooter: ",
footer,
"\n---\n\n",
post[[4]],
sep = "",
file = paste0(yr,"/",mt,"/",dy,"/",ti,"/index.md"))
}
lapply(actualposts,buildcontent)
